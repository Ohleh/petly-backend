{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "Petly API Docs",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data", "image/png"],
  "produces": ["application/json", "multipart/form-data", "image/png"],
  "servers": [
    { "url": "http://localhost:4000", "description": "Local" },
    {
      "url": "https://petly-backend-vopf.onrender.com",
      "description": "Main"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Our Friends",
      "description": "Services-sidebar endpoints"
    },
    {
      "name": "News",
      "description": "News endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create a new user",

        "parameters": [],

        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": { "description": "Bad Request" },
          "409": { "description": "Email in use" },
          "500": { "description": "Server error" }
        }
      }
    },

    "/api/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",

        "parameters": [],

        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Email or password is wrong"
          },
          "500": { "description": "Server error" }
        }
      }
    },

    "/api/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out user",

        "parameters": [],

        "security": [{ "Bearer": [] }],

        "responses": {
          "204": {
            "description": "Logout success"
          },
          "401": {
            "description": "Missing header with authorization token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get information about the current user",

        "parameters": [],

        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/update": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update information about the current user",

        "parameters": [],

        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInfoRequest"
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserInfoRequest"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/avatar": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update user avatar",

        "security": [{ "Bearer": [] }],

        "parameters": [],

        "requestBody": {
          "description": "User avatar object",
          "required": true,
          "content": {
            "multipart/form-data:": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "File avatar"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": [{ "avatarURL": "string" }]
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/restore": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Restore user password",

        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "email": "User's email"
              },
              "example": {
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "example": "bjohnson@gmail.com"
                }
              }
            }
          }
        },

        "parameters": [],

        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": { "message": "New password email sent" }
              }
            }
          },
          "404": {
            "description": "Email is not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/verify/{verificationToken}": {
      "get": {
        "tags": ["Auth"],
        "summary": "Update user token",

        "parameters": [],

        "responses": {
          "200": {
            "description": "Verification successful"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": { "description": "Server error" }
        }
      }
    },

    "/api/users/verify": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verify user Email",

        "parameters": [],

        "security": [{ "Bearer": [] }],

        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "email": "User's email"
              },
              "example": {
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "example": "bjohnson@gmail.com"
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Verification email sent",
            "content": {
              "application/json": {
                "example": { "message": "Verification email sent" }
              }
            }
          },
          "400": { "description": "Verification has already been passed" },
          "404": {
            "description": "User is not found"
          }
        }
      }
    },

    "/api/friends": {
      "get": {
        "tags": ["Our Friends"],
        "summary": "Obtaining contact information about services that provide services",
        "consumes": "multipart/form-data",

        "parameters": [
          {
            "in": "formData",
            "name": "upfile",
            "type": "file",
            "description": "The file to upload"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFriendsRequest"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/news": {
      "get": {
        "tags": ["News"],
        "summary": "Receiving news",

        "parameters": [],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getNewsRequest"
                }
              }
            }
          },
          "404": {
            "description": "Not find"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/{categoryName}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Receiving ads by category",

        "parameters": [
          {
            "name": "categoryName",
            "in": "path",
            "required": true,
            "description": "Category Name",
            "schema": {
              "type": "string",
              "example": "sell"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page pagination",
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for pagination",
            "type": "integer"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/noticeSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices": {
      "post": {
        "tags": ["Notices"],
        "summary": "Adding ads according to the selected category",

        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Notice object",
          "required": true,
          "content": {
            "multipart/form-data:": {
              "schema": {
                "type": "object",
                "properties": {
                  "tittle": {
                    "type": "string",
                    "description": "Jack dog rasell"
                  },
                  "name": {
                    "type": "string",
                    "description": "Jack"
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "description": "22.04.2018"
                  },
                  "breed": {
                    "type": "string",
                    "description": "Basenji"
                  },
                  "sex": {
                    "type": "string",
                    "description": "male"
                  },
                  "location": {
                    "type": "string",
                    "description": "Lviv"
                  },
                  "price": {
                    "type": "string",
                    "description": "200$"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comments: Lorem ipsum dolor sit amet, consecteturLorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur   Lorem ipsum dolor sit amet, consecteturLorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur  ipsum dolor sit amet, rem ipsum dolor sit amet,  ipsum sit"
                  },
                  "category": {
                    "type": "string",
                    "description": "sell, lost-found, inGoodHands"
                  },
                  "petImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "File petImage"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "File is required"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/find/{id}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Receiving one ad",

        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User's id",
            "schema": {
              "type": "string",
              "example": "63d93eb88066bf67f18c73f8"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/noticeSchema"
                }
              }
            }
          },
          "404": {
            "description": "Notice not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/favorites": {
      "get": {
        "tags": ["Notices"],
        "summary": "Receiving ads of the authorized user added by him to the favorites",

        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/{noticeId}/favorites": {
      "post": {
        "tags": ["Notices"],
        "summary": "Adding an authorized user's ad to favorites",

        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": "true",
            "type": "string",
            "description": "",
            "schema": {
              "type": "string",
              "example": "63d93eb88066bf67f18c73f8"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Notice was added to favorites"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },

      "delete": {
        "tags": ["Notices"],
        "summary": "Deletion of the ad of the authorized user added to the favorites",

        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": "true",
            "type": "string",
            "description": "",
            "schema": {
              "type": "string",
              "example": "63d93eb88066bf67f18c73f8"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Notice was deleted from Favorite"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Notice not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/own": {
      "get": {
        "tags": ["Notices"],
        "summary": "Receiving ads of an authorized user created by the same user",

        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/notices/{noticeId}": {
      "delete": {
        "tags": ["Notices"],
        "summary": "Deleting an ad of an authorized user",

        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": "true",
            "type": "string",
            "description": ""
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Notice was deleted"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Notice not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/mypets": {
      "get": {
        "tags": ["User"],
        "summary": "Receiving personal information about the user and information about the user's animals",

        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/petsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Adding a user animal card",

        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Pets object",
          "required": true,
          "content": {
            "multipart/form-data:": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Jack"
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "description": "22.04.2018"
                  },
                  "breed": {
                    "type": "string",
                    "description": "Basenji"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comments: Lorem ipsum dolor sit amet, consecteturLorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur   Lorem ipsum dolor sit amet, consecteturLorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur  ipsum dolor sit amet, rem ipsum dolor sit amet,  ipsum sit"
                  },
                  "photoPet": {
                    "type": "string",
                    "format": "binary",
                    "description": "File photopets"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/petsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/mypets/{petId}": {
      "delete": {
        "tags": ["User"],
        "summary": "Removing the card with the user's animal",

        "security": [{ "Bearer": [] }],

        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": "true",
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password", "name", "city", "phone"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "bjohnson@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "QWerty123"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Boris Johnson"
          },
          "city": {
            "type": "string",
            "description": "User's city and region",
            "example": "Brovary, Kyiv"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380981112233"
          }
        }
      },

      "RegistrationResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name",
              "example": "Boris Johnson"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "example": "bjohnson@gmail.com"
            },
            "token": {
              "type": "string",
              "description": "token",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGE1MmY1MGJiMTVlOTM1NWRiMTMxYSIsImlhdCI6MTY3NTM3MTE2MSwiZXhwIjoxNjc1MzcyMDYxfQ.hesoLS6Xr6LZfjgpo-otp8eZCgCLoLKMWRYpojZ6cKE"
            },
            "refreshToken": {
              "type": "string",
              "description": "refreshToken",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGE1MmY1MGJiMTVlOTM1NWRiMTMxYSIsImlhdCI6MTY3NTM3MTE2MSwiZXhwIjoxNjc1MzcyMDYxfQ.hesoLS6Xr6LZfjgpo-otp8eZCgCLoLKMWRYpojZ6cKE"
            }
          }
        },
        "example": {
          "name": "Boris Johnson",
          "email": "bjohnson@gmail.com",
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGE1MmY1MTMxYSIsImlhdCI6MTY3NTM3MTE2MSwiZXhwIjoxNjc1MzcyMDYxfQ.hesoLS6Xr6LZfjgpo-otp8eZCgCLoLKMWRYpojZ6cKE",
          "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGE1MmY1MTMxYSIsImlhdCI6MTY3NTM3MTE2MSwiZXhwIjoxNjc1MzcyMDYxfQ.hesoLS6Xr6LZfjgpo-otp8eZCgCLoLKMWRYpojZ6cKE"
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "bjohnson@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "QWerty123"
          }
        }
      },

      "LoginResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name",
              "example": "Boris Johnson"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "example": "bjohnson@gmail.com"
            },
            "token": {
              "type": "string",
              "description": "token",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGE1MmY1MGJiMTVlOTM1NWRiMTMxYSIsImlhdCI6MTY3NTM3MTE2MSwiZXhwIjoxNjc1MzcyMDYxfQ.hesoLS6Xr6LZfjgpo-otp8eZCgCLoLKMWRYpojZ6cKE"
            }
          }
        },
        "example": {
          "name": "Boris Johnson",
          "email": "bjohnson@gmail.com",
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGE1MmY1MTMxYSIsImlhdCI6MTY3NTM3MTE2MSwiZXhwIjoxNjc1MzcyMDYxfQ.hesoLS6Xr6LZfjgpo-otp8eZCgCLoLKMWRYpojZ6cKE"
        }
      },

      "GetUserInfoRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "bjohnson@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Boris Johnson"
          },
          "city": {
            "type": "string",
            "description": "User's city and region",
            "example": "Brovary, Kyiv"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380981112233"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday"
          },
          "avatarURL": {
            "type": "string",
            "description": "avatar URL"
          }
        }
      },

      "UpdateUserInfoRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "bjohnson@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Boris Johnson"
          },
          "city": {
            "type": "string",
            "description": "User's city and region",
            "example": "Brovary, Kyiv"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380981112233"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday"
          }
        }
      },

      "GetUserInfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "bjohnson@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Boris Johnson"
          },
          "city": {
            "type": "string",
            "description": "User's city and region",
            "example": "Brovary, Kyiv"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380981112233"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday"
          },
          "avatarURL": {
            "type": "string",
            "description": "avatar URL"
          }
        }
      },

      "getFriendsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "addressUrl": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "workDays": {
            "type": "object"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },

      "getNewsRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        }
      },

      "noticeSchema": {
        "type": "object",
        "required": ["tittle", "sex", "location", "category"],
        "properties": {
          "tittle": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "bread": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "petImage": {
            "type": "string"
          },
          "owner": {
            "type": "object"
          }
        }
      },

      "addNoticeSchema": {
        "type": "object",
        "required": [
          "tittle",
          "name",
          "dateOfBirth",
          "bread",
          "sex",
          "location",
          "price",
          "comments",
          "category",
          "petImage"
        ],
        "properties": {
          "tittle": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "bread": {
            "type": "string"
          },
          "sex": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "petImage": {
            "type": "string"
          }
        }
      },

      "petsSchema": {
        "type": "object",
        "required": ["name", "bread", "comments"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Jack"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "22.04.2018"
          },
          "bread": {
            "type": "string",
            "example": "Basenji"
          },
          "comments": {
            "type": "string",
            "example": "Comments: Lorem ipsum dolor sit amet, consecteturLorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur   Lorem ipsum dolor sit amet, consecteturLorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor sit amet, consectetur  ipsum dolor sit amet, rem ipsum dolor sit amet,  ipsum sit, "
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
